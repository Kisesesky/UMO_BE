# 기본 docker-compose.yml 방식
# services:
#   database:
#     image: postgres:15
#     container_name: "${DB_CONTAINER_NAME}"
#     restart: always
#     ports:
#       - "${DB_PORTS:-}"
#     environment:
#       POSTGRES_USER: "${DATABASE_USER}"
#       POSTGRES_PASSWORD: "${DATABASE_PASSWORD}"
#       POSTGRES_DB: "${DATABASE_NAME}"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   nestjs-app:
#     build: .
#     container_name: "${APP_CONTAINER_NAME}"
#     restart: always
#     depends_on:
#       database:
#         condition: service_healthy
#     ports:
#       - "${APP_PORTS}"
#     env_file:
#       - .env
#     command: sh -c "npm run migration:run && npm run start:prod"

# volumes:
#   postgres_data:

# nginx docker-compose.yml방식
services:
  database:
    image: postgres:15
    container_name: "${DB_CONTAINER_NAME}"
    restart: always
    ports:
      - "${DB_PORTS}"
    environment:
      POSTGRES_USER: "${DATABASE_USER}"
      POSTGRES_PASSWORD: "${DATABASE_PASSWORD}"
      POSTGRES_DB: "${DATABASE_NAME}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  nestjs-app:
    build: .
    image: "${APP_IMAGE}"
    container_name: "${APP_CONTAINER_NAME}"
    restart: always
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "${APP_PORTS}"
    env_file:
      - .env
    command: sh -c "npm run migration:run && npm run start:prod"

  nginx:
    image: "${NGX_IMAGE:-}"
    container_name: "${NGX_CONTAINER_NAME}"
    ports:
      - "${NGX_PORTS_HTTP}"
      - "${NGX_PORT_HTTPS}"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - nestjs-app
volumes:
  postgres_data:
